patch-package
--- a/node_modules/json-schema-ref-parser/lib/dereference.js
+++ b/node_modules/json-schema-ref-parser/lib/dereference.js
@@ -1,10 +1,10 @@
 'use strict';
 
 var $Ref = require('./ref'),
-    Pointer = require('./pointer'),
-    ono = require('ono'),
-    debug = require('./util/debug'),
-    url = require('./util/url');
+  Pointer = require('./pointer'),
+  ono = require('ono'),
+  debug = require('./util/debug'),
+  url = require('./util/url');
 
 module.exports = dereference;
 
@@ -15,9 +15,16 @@ module.exports = dereference;
  * @param {$RefParser} parser
  * @param {$RefParserOptions} options
  */
-function dereference (parser, options) {
+function dereference(parser, options) {
   debug('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);
-  var dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, '#', [], parser.$refs, options);
+  var dereferenced = crawl(
+    parser.schema,
+    parser.$refs._root$Ref.path,
+    '#',
+    [],
+    parser.$refs,
+    options,
+  );
   parser.$refs.circular = dereferenced.circular;
   parser.schema = dereferenced.value;
 }
@@ -33,11 +40,11 @@ function dereference (parser, options) {
  * @param {$RefParserOptions} options
  * @returns {{value: object, circular: boolean}}
  */
-function crawl (obj, path, pathFromRoot, parents, $refs, options) {
+function crawl(obj, path, pathFromRoot, parents, $refs, options) {
   var dereferenced;
   var result = {
     value: obj,
-    circular: false
+    circular: false,
   };
 
   if (obj && typeof obj === 'object') {
@@ -47,9 +54,8 @@ function crawl (obj, path, pathFromRoot, parents, $refs, options) {
       dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, $refs, options);
       result.circular = dereferenced.circular;
       result.value = dereferenced.value;
-    }
-    else {
-      Object.keys(obj).forEach(function (key) {
+    } else {
+      Object.keys(obj).forEach(function(key) {
         var keyPath = Pointer.join(path, key);
         var keyPathFromRoot = Pointer.join(pathFromRoot, key);
         var value = obj[key];
@@ -59,15 +65,15 @@ function crawl (obj, path, pathFromRoot, parents, $refs, options) {
           dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, $refs, options);
           circular = dereferenced.circular;
           obj[key] = dereferenced.value;
-        }
-        else {
+        } else {
           if (parents.indexOf(value) === -1) {
             dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, $refs, options);
             circular = dereferenced.circular;
             obj[key] = dereferenced.value;
-          }
-          else {
+          } else {
             circular = foundCircularReference(keyPath, $refs, options);
+            obj[key] = {};
+            circular = false;
           }
         }
 
@@ -93,7 +99,7 @@ function crawl (obj, path, pathFromRoot, parents, $refs, options) {
  * @param {$RefParserOptions} options
  * @returns {{value: object, circular: boolean}}
  */
-function dereference$Ref ($ref, path, pathFromRoot, parents, $refs, options) {
+function dereference$Ref($ref, path, pathFromRoot, parents, $refs, options) {
   debug('Dereferencing $ref pointer "%s" at %s', $ref.$ref, path);
 
   var $refPath = url.resolve(path, $ref.$ref);
@@ -110,11 +116,23 @@ function dereference$Ref ($ref, path, pathFromRoot, parents, $refs, options) {
   // Crawl the dereferenced value (unless it's circular)
   if (!circular) {
     // Determine if the dereferenced value is circular
-    var dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, $refs, options);
+    var dereferenced = crawl(
+      dereferencedValue,
+      pointer.path,
+      pathFromRoot,
+      parents,
+      $refs,
+      options,
+    );
     circular = dereferenced.circular;
     dereferencedValue = dereferenced.value;
   }
 
+  if (circular) {
+    dereferencedValue = { ...dereferencedValue, 'x-circular-ref': true };
+    circular = false;
+  }
+
   if (circular && !directCircular && options.dereference.circular === 'ignore') {
     // The user has chosen to "ignore" circular references, so don't change the value
     dereferencedValue = $ref;
@@ -126,9 +144,11 @@ function dereference$Ref ($ref, path, pathFromRoot, parents, $refs, options) {
     dereferencedValue.$ref = pathFromRoot;
   }
 
+  dereferencedValue.__pointer = $ref.$ref;
+
   return {
     circular: circular,
-    value: dereferencedValue
+    value: dereferencedValue,
   };
 }
 
@@ -141,7 +161,7 @@ function dereference$Ref ($ref, path, pathFromRoot, parents, $refs, options) {
  * @param {$RefParserOptions} options
  * @returns {boolean} - always returns true, to indicate that a circular reference was found
  */
-function foundCircularReference (keyPath, $refs, options) {
+function foundCircularReference(keyPath, $refs, options) {
   $refs.circular = true;
   if (!options.dereference.circular) {
     throw ono.reference('Circular $ref pointer found at %s', keyPath);
